.row
  .large-8.columns
    h1=@duel_queue.name

    = render partial: 'duel_queues/live_list', locals: {duel_queue: @duel_queue, duels: @duel_queue.duels.order("created_at desc")}
  .large-4.columns
    ul.pricing-table
      li.bullet-item
        |Magarena Version
        =< @duel_queue.magarena_version
      li.bullet-item
        |Life:
        =< @duel_queue.life
      li.bullet-item
        => @duel_queue.ai1
        => @duel_queue.ai1_strength
        |vs
        =< @duel_queue.ai2
        =< @duel_queue.ai2_strength
      - unless @duel_queue.custom_params.blank?
        li.bullet-item
          |Custom Params:
          textarea
            =< @duel_queue.custom_params
      li.bullet-item
        |Access Token
        .input-group
          input.input-group-field type="text" id="copyTarget" value=@duel_queue.access_token
          .input-group-button
            input type="submit" id="copyButton" class="button" value="Copy"
      li.bullet-item
        = link_to "Edit", edit_duel_queue_path(@duel_queue), class:"button small"

javascript:
  document.getElementById("copyButton").addEventListener("click", function() {
    copyToClipboard(document.getElementById("copyTarget"));
  });

  function copyToClipboard(elem) {
    // create hidden text element, if it doesn't already exist
    var targetId = "_hiddenCopyText_";
    var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
    var origSelectionStart, origSelectionEnd;
    if (isInput) {
        // can just use the original source element for the selection and copy
        target = elem;
        origSelectionStart = elem.selectionStart;
        origSelectionEnd = elem.selectionEnd;
    } else {
        // must use a temporary form element for the selection and copy
        target = document.getElementById(targetId);
        if (!target) {
            var target = document.createElement("textarea");
            target.style.position = "absolute";
            target.style.left = "-9999px";
            target.style.top = "0";
            target.id = targetId;
            document.body.appendChild(target);
        }
        target.textContent = elem.textContent;
    }
    // select the content
    var currentFocus = document.activeElement;
    target.focus();
    target.setSelectionRange(0, target.value.length);
    
    // copy the selection
    var succeed;
    try {
        succeed = document.execCommand("copy");
    } catch(e) {
        succeed = false;
    }
    // restore original focus
    if (currentFocus && typeof currentFocus.focus === "function") {
        currentFocus.focus();
    }
    
    if (isInput) {
        // restore prior selection
        elem.setSelectionRange(origSelectionStart, origSelectionEnd);
    } else {
        // clear temporary content
        target.textContent = "";
    }
    return succeed;
  }
